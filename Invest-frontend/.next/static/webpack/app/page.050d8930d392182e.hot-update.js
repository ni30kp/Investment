"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/components/OverlapAnalysis.tsx":
/*!********************************************!*\
  !*** ./app/components/OverlapAnalysis.tsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ OverlapAnalysis; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction OverlapAnalysis(param) {\n    let { funds = [\n        {\n            id: \"1\",\n            name: \"Axis Bluechip Fund\",\n            color: \"#FFD700\"\n        },\n        {\n            id: \"2\",\n            name: \"HDFC Top 100 Fund\",\n            color: \"#4169E1\"\n        },\n        {\n            id: \"3\",\n            name: \"ICICI Prudential Bluechip Fund\",\n            color: \"#32CD32\"\n        },\n        {\n            id: \"4\",\n            name: \"SBI Bluechip Fund\",\n            color: \"#FF6347\"\n        }\n    ], commonStocks = [\n        \"HDFC LTD.\",\n        \"RIL\",\n        \"INFY\",\n        \"TCS\",\n        \"HDFCBANK\",\n        \"BHARTIARTL\"\n    ], overlapPairs = [] } = param;\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [canvasSize, setCanvasSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        width: 0,\n        height: 0\n    });\n    // Handle resize\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleResize = ()=>{\n            if (containerRef.current) {\n                setCanvasSize({\n                    width: containerRef.current.offsetWidth,\n                    height: 500 // Increased height to accommodate more funds\n                });\n            }\n        };\n        // Initial size\n        handleResize();\n        // Add resize listener\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>window.removeEventListener(\"resize\", handleResize);\n    }, []);\n    // Draw the visualization when canvas size changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!canvasRef.current || canvasSize.width === 0) return;\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        // Set canvas dimensions with device pixel ratio for sharper rendering\n        const dpr = window.devicePixelRatio || 1;\n        canvas.width = canvasSize.width * dpr;\n        canvas.height = canvasSize.height * dpr;\n        // Scale all drawing operations\n        ctx.scale(dpr, dpr);\n        // Set display size\n        canvas.style.width = \"\".concat(canvasSize.width, \"px\");\n        canvas.style.height = \"\".concat(canvasSize.height, \"px\");\n        // Clear canvas\n        ctx.clearRect(0, 0, canvasSize.width, canvasSize.height);\n        // Draw the overlap visualization\n        drawOverlapVisualization(ctx, canvasSize.width, canvasSize.height, funds, commonStocks, overlapPairs);\n    }, [\n        funds,\n        commonStocks,\n        overlapPairs,\n        canvasSize\n    ]);\n    // Function to draw the overlap visualization\n    const drawOverlapVisualization = (ctx, width, height, funds, commonStocks, overlapPairs)=>{\n        // Background for the visualization area (dark gray)\n        ctx.fillStyle = \"#1a1a1a\";\n        ctx.fillRect(0, 0, width, height);\n        // Draw funds on the left side\n        const fundBoxHeight = 50; // Reduced height for each fund box\n        const fundBoxWidth = 180;\n        const fundSpacing = 30; // Reduced spacing between funds\n        const totalFundsHeight = funds.length * fundBoxHeight + (funds.length - 1) * fundSpacing;\n        let fundStartY = (height - totalFundsHeight) / 2;\n        const fundPositions = {};\n        funds.forEach((fund, index)=>{\n            const y = fundStartY + index * (fundBoxHeight + fundSpacing);\n            // Store position for later use\n            fundPositions[fund.id] = {\n                x: 50,\n                y,\n                width: fundBoxWidth,\n                height: fundBoxHeight\n            };\n            // Draw fund box\n            ctx.fillStyle = \"#2a2a2a\";\n            ctx.beginPath();\n            ctx.roundRect(50, y, fundBoxWidth, fundBoxHeight, 8);\n            ctx.fill();\n            // Draw colored indicator bar - now on the right side of the fund box\n            ctx.fillStyle = fund.color;\n            ctx.fillRect(fundBoxWidth + 55, y, 5, fundBoxHeight);\n            // Draw fund name\n            ctx.fillStyle = \"#FFFFFF\";\n            ctx.font = \"12px Arial\";\n            ctx.textAlign = \"center\";\n            // Improved text wrapping to ensure text stays within the fund box\n            const maxWidth = fundBoxWidth - 20; // Leave some padding\n            const words = fund.name.split(\" \");\n            let lines = [];\n            let currentLine = words[0];\n            // Create lines that fit within the box width\n            for(let i = 1; i < words.length; i++){\n                const testLine = currentLine + \" \" + words[i];\n                const metrics = ctx.measureText(testLine);\n                if (metrics.width > maxWidth) {\n                    lines.push(currentLine);\n                    currentLine = words[i];\n                } else {\n                    currentLine = testLine;\n                }\n            }\n            lines.push(currentLine); // Add the last line\n            // Calculate vertical position for text\n            const lineHeight = 16;\n            const totalTextHeight = lines.length * lineHeight;\n            let textY = y + (fundBoxHeight - totalTextHeight) / 2 + lineHeight;\n            // Draw each line centered in the box\n            lines.forEach((line)=>{\n                ctx.fillText(line, fundBoxWidth / 2 + 50, textY);\n                textY += lineHeight;\n            });\n        });\n        // Draw stocks on the right side\n        const stockBoxHeight = 30;\n        const stockSpacing = 20;\n        const totalStocksHeight = commonStocks.length * stockBoxHeight + (commonStocks.length - 1) * stockSpacing;\n        let stockStartY = (height - totalStocksHeight) / 2;\n        const stockPositions = {};\n        commonStocks.forEach((stock, index)=>{\n            const y = stockStartY + index * (stockBoxHeight + stockSpacing);\n            // Store position for later use\n            stockPositions[stock] = {\n                x: width - 120,\n                y: y + stockBoxHeight / 2\n            };\n            // Draw stock label\n            ctx.fillStyle = \"#FFFFFF\";\n            ctx.font = \"14px Arial\";\n            ctx.textAlign = \"right\";\n            ctx.fillText(stock, width - 20, y + stockBoxHeight / 2 + 4);\n            // Draw small square indicator for each stock\n            ctx.fillStyle = \"#FFFFFF\";\n            ctx.fillRect(width - 130, y + stockBoxHeight / 2 - 2, 4, 4);\n        });\n        // Draw connections between funds and stocks\n        ctx.lineWidth = 1.5;\n        // Create a map to track which stocks are common between which funds\n        const fundStockMap = {};\n        // Initialize the map for each fund\n        funds.forEach((fund)=>{\n            fundStockMap[fund.id] = new Set();\n        });\n        // Populate the map based on overlap pairs\n        overlapPairs.forEach((pair)=>{\n            if (pair.data && pair.data.commonStocks) {\n                const fund1Id = pair.fund1.toString();\n                const fund2Id = pair.fund2.toString();\n                pair.data.commonStocks.forEach((stock)=>{\n                    if (fundStockMap[fund1Id]) fundStockMap[fund1Id].add(stock);\n                    if (fundStockMap[fund2Id]) fundStockMap[fund2Id].add(stock);\n                });\n            }\n        });\n        // For each fund, connect to its common stocks\n        funds.forEach((fund)=>{\n            const fundPos = fundPositions[fund.id];\n            const fundCenterY = fundPos.y + fundPos.height / 2;\n            const fundEndX = fundPos.x + fundPos.width + 5; // Start from the right edge of the fund box\n            // Get the stocks for this fund\n            const stocksForFund = fundStockMap[fund.id] || new Set();\n            // Draw connections only to stocks that are common for this fund\n            commonStocks.forEach((stock)=>{\n                if (stocksForFund.has(stock)) {\n                    const stockPos = stockPositions[stock];\n                    // Create gradient for the curve\n                    const gradient = ctx.createLinearGradient(fundEndX, fundCenterY, stockPos.x, stockPos.y);\n                    gradient.addColorStop(0, fund.color + \"80\"); // 50% opacity at start\n                    gradient.addColorStop(1, fund.color + \"40\"); // 25% opacity at end\n                    ctx.strokeStyle = gradient;\n                    // Draw the curve\n                    ctx.beginPath();\n                    ctx.moveTo(fundEndX, fundCenterY);\n                    // Control points for the bezier curve\n                    const cp1x = fundEndX + (stockPos.x - fundEndX) * 0.4;\n                    const cp1y = fundCenterY;\n                    const cp2x = fundEndX + (stockPos.x - fundEndX) * 0.6;\n                    const cp2y = stockPos.y;\n                    ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, stockPos.x, stockPos.y);\n                    ctx.stroke();\n                }\n            });\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"relative h-[500px] w-full\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n            ref: canvasRef,\n            style: {\n                width: \"100%\",\n                height: \"100%\",\n                position: \"absolute\",\n                top: 0,\n                left: 0\n            }\n        }, void 0, false, {\n            fileName: \"/Users/nitish/Desktop/InvestWelth/Invest-frontend/app/components/OverlapAnalysis.tsx\",\n            lineNumber: 269,\n            columnNumber: 13\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/nitish/Desktop/InvestWelth/Invest-frontend/app/components/OverlapAnalysis.tsx\",\n        lineNumber: 268,\n        columnNumber: 9\n    }, this);\n}\n_s(OverlapAnalysis, \"wtHXhGCAht3/oLYxq4+cPYMbEKU=\");\n_c = OverlapAnalysis;\nvar _c;\n$RefreshReg$(_c, \"OverlapAnalysis\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/OverlapAnalysis.tsx\n"));

/***/ })

});